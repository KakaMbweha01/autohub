{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:8000/api';\n// Axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const getFavorites = async () => await api.get('/favorites/');\nexport const addToFavorites = async carId => await api.post(`/favorites/add/${carId}`);\nexport const searchCars = async query => await api.get('/search/', {\n  params: {\n    q: query\n  }\n});\nexport const getNotifications = async () => await api.get('/notifications');\nexport const getUserProfile = async () => await api.get('/profile/');\n//export const getCars = () =\n\n// if needed: token-based authentication\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken'); // if token is stored in local storage\n  if (token) {\n    config.headers.Authorization = 'Token ${token}';\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","getFavorites","get","addToFavorites","carId","post","searchCars","query","params","q","getNotifications","getUserProfile","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject"],"sources":["E:/Porto/autohub/autohub-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://127.0.0.1:8000/api';\r\n// Axios instance\r\nconst api = axios.create({\r\n    baseURL: API_BASE_URL,\r\n    timeout: 5000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\nexport const getFavorites = async () => await api.get('/favorites/');\r\nexport const addToFavorites = async (carId) => await api.post(`/favorites/add/${carId}`);\r\nexport const searchCars = async (query) => await api.get('/search/', { params: { q: query } });\r\nexport const getNotifications = async () => await api.get('/notifications');\r\nexport const getUserProfile = async () => await api.get('/profile/');\r\n//export const getCars = () =\r\n\r\n// if needed: token-based authentication\r\napi.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('authToken'); // if token is stored in local storage\r\n    if (token) {\r\n        config.headers.Authorization = 'Token ${token}';\r\n    }\r\n    return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AAChD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY,MAAML,GAAG,CAACM,GAAG,CAAC,aAAa,CAAC;AACpE,OAAO,MAAMC,cAAc,GAAG,MAAOC,KAAK,IAAK,MAAMR,GAAG,CAACS,IAAI,CAAC,kBAAkBD,KAAK,EAAE,CAAC;AACxF,OAAO,MAAME,UAAU,GAAG,MAAOC,KAAK,IAAK,MAAMX,GAAG,CAACM,GAAG,CAAC,UAAU,EAAE;EAAEM,MAAM,EAAE;IAAEC,CAAC,EAAEF;EAAM;AAAE,CAAC,CAAC;AAC9F,OAAO,MAAMG,gBAAgB,GAAG,MAAAA,CAAA,KAAY,MAAMd,GAAG,CAACM,GAAG,CAAC,gBAAgB,CAAC;AAC3E,OAAO,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY,MAAMf,GAAG,CAACM,GAAG,CAAC,WAAW,CAAC;AACpE;;AAEA;AACAN,GAAG,CAACgB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACf,OAAO,CAACmB,aAAa,GAAG,gBAAgB;EACnD;EACA,OAAOJ,MAAM;AACb,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;AACD,eAAexB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}