{"ast":null,"code":"import axios from 'axios';\nconst API_BASE = 'http://127.0.0.1:8000';\n// Axios instance\nconst api = axios.create({\n  baseURL: API_BASE,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const getFavorites = () => axios.get(`${API_BASE}/favorites/`);\nexport const addFavorite = carId => axios.post(`${API_BASE}/favorites/add/${carId}`);\nexport const searchCars = query => axios.get(`${API_BASE}/search/`, {\n  params: {\n    q: query\n  }\n});\nexport const getNotifications = () => axios.get(`${API_BASE}/notifications`);\nexport const getProfile = () => axios.get(`${API_BASE}/profile/`);\nexport const getCars = () => axios.get(`${API_BASE}/cars/`);\nexport const getCarDetails = carId => axios.get(`${API_BASE}/cars/${carId}/`);\n\n// if needed: token-based authentication\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken'); // if token is stored in local storage\n  if (token) {\n    config.headers.Authorization = 'Token ${token}';\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default api;","map":{"version":3,"names":["axios","API_BASE","api","create","baseURL","timeout","headers","getFavorites","get","addFavorite","carId","post","searchCars","query","params","q","getNotifications","getProfile","getCars","getCarDetails","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject"],"sources":["E:/Porto/autohub/autohub-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE = 'http://127.0.0.1:8000';\r\n// Axios instance\r\nconst api = axios.create({\r\n    baseURL: API_BASE,\r\n    timeout: 5000,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\nexport const getFavorites = () => axios.get(`${API_BASE}/favorites/`);\r\nexport const addFavorite = (carId) => axios.post(`${API_BASE}/favorites/add/${carId}`);\r\nexport const searchCars = (query) => axios.get(`${API_BASE}/search/`, { params: { q: query } });\r\nexport const getNotifications = () => axios.get(`${API_BASE}/notifications`);\r\nexport const getProfile = () => axios.get(`${API_BASE}/profile/`);\r\nexport const getCars = () => axios.get(`${API_BASE}/cars/`);\r\nexport const getCarDetails = (carId) => axios.get(`${API_BASE}/cars/${carId}/`);\r\n\r\n// if needed: token-based authentication\r\napi.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('authToken'); // if token is stored in local storage\r\n    if (token) {\r\n        config.headers.Authorization = 'Token ${token}';\r\n    }\r\n    return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,uBAAuB;AACxC;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAMP,KAAK,CAACQ,GAAG,CAAC,GAAGP,QAAQ,aAAa,CAAC;AACrE,OAAO,MAAMQ,WAAW,GAAIC,KAAK,IAAKV,KAAK,CAACW,IAAI,CAAC,GAAGV,QAAQ,kBAAkBS,KAAK,EAAE,CAAC;AACtF,OAAO,MAAME,UAAU,GAAIC,KAAK,IAAKb,KAAK,CAACQ,GAAG,CAAC,GAAGP,QAAQ,UAAU,EAAE;EAAEa,MAAM,EAAE;IAAEC,CAAC,EAAEF;EAAM;AAAE,CAAC,CAAC;AAC/F,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAMhB,KAAK,CAACQ,GAAG,CAAC,GAAGP,QAAQ,gBAAgB,CAAC;AAC5E,OAAO,MAAMgB,UAAU,GAAGA,CAAA,KAAMjB,KAAK,CAACQ,GAAG,CAAC,GAAGP,QAAQ,WAAW,CAAC;AACjE,OAAO,MAAMiB,OAAO,GAAGA,CAAA,KAAMlB,KAAK,CAACQ,GAAG,CAAC,GAAGP,QAAQ,QAAQ,CAAC;AAC3D,OAAO,MAAMkB,aAAa,GAAIT,KAAK,IAAKV,KAAK,CAACQ,GAAG,CAAC,GAAGP,QAAQ,SAASS,KAAK,GAAG,CAAC;;AAE/E;AACAR,GAAG,CAACkB,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACjB,OAAO,CAACqB,aAAa,GAAG,gBAAgB;EACnD;EACA,OAAOJ,MAAM;AACb,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;AACD,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}